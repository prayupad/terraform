# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: Terraform_$(BuildDefinitionName)
parameters:
  - name: actionToPerform
    displayName: Deploy/Destroy
    default: Deploy
    values:
      - Deploy
      - Destroy
variables:
  - name: tfresourceGroup
    value: 'terraformRG'
  - name: tfstorageAccount
    value: 'tfstoragepu'
  - name: tfcontainer
    value: 'tfstate'
  - name: tfkey
    value: 'labphaseOne.tfstate'
trigger:
- main
pool:
  vmImage: ubuntu-latest
stages:
  - stage: validate
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: 'v1.2.2'
      - task: TerraformCLI@0
        displayName: Init 
        inputs:
          command: 'init'
          commandOptions: -reconfigure
          backendType: 'azurerm'
          backendServiceArm: 'terraform'
          backendAzureRmSubscriptionId: '14c83b29-a1c0-4f29-b32c-9b94ba49886f'
          ensureBackend: true
          backendAzureRmResourceGroupName: '$(tfresourceGroup)'
          backendAzureRmResourceGroupLocation: 'eastus2'
          backendAzureRmStorageAccountName: '$(tfstorageAccount)'
          backendAzureRmStorageAccountSku: 'Standard_LRS'
          backendAzureRmContainerName: '$(tfcontainer)'
          backendAzureRmKey: '$(tfkey)'
          workingDirectory: '$(System.DefaultWorkingDirectory)/incubationlab'
      - task: TerraformCLI@0
        displayName: validate
        inputs:
          provider: azurerm
          command: 'validate'
          
  - stage: deploy
    condition: eq('${{ parameters.actionToPerform}}', 'Deploy')
    dependsOn: [validate]
    jobs:
      - deployment: deploy_terraform
        continueOnError: false
        environment: terraform_dev
        timeoutInMinutes: 15
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: TerraformInstaller@0
                  displayName: 'install'
                  inputs:
                    terraformVersion: 'v1.2.2'
                - task: TerraformCLI@0
                  displayName: Init 
                  inputs:
                    command: 'init'
                    commandOptions: -reconfigure
                    backendType: 'azurerm'
                    backendServiceArm: 'terraform'
                    backendAzureRmSubscriptionId: '14c83b29-a1c0-4f29-b32c-9b94ba49886f'
                    ensureBackend: true
                    backendAzureRmResourceGroupName: '$(tfresourceGroup)'
                    backendAzureRmResourceGroupLocation: 'eastus2'
                    backendAzureRmStorageAccountName: '$(tfstorageAccount)'
                    backendAzureRmStorageAccountSku: 'Standard_LRS'
                    backendAzureRmContainerName: '$(tfcontainer)'
                    backendAzureRmKey: '$(tfkey)'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/incubationlab'
                - task: TerraformCLI@0
                  displayName: validate
                  inputs:
                    provider: azurerm
                    command: 'validate'
                
                - task: TerraformCLI@0
                  displayName: 'terraform plan'
                  inputs:
                    command: 'plan'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/incubationlab'
                    environmentServiceName: 'terraform'
                    commandOptions: '-lock=false'
                    allowTelemetryCollection: true
                    publishPlanResults: 'tfplan'
        
                - task: TerraformCLI@0
                  displayName: 'terraform apply'
                  inputs:
                    command: 'apply'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/incubationlab'
                    environmentServiceName: 'terraform'
                    commandOptions: '-lock=false -auto-approve' 
                    allowTelemetryCollection: true
  - stage: Destroy
    dependsOn: [validate]
    condition: eq('${{ parameters.actionToPerform}}', 'Destroy')
    jobs:
    - job: terraform_destroy
      steps:
      - checkout: self
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: 'v1.2.2'
              
      - task: TerraformCLI@0
        displayName: 'init'
        inputs:
            command: 'init'
            commandOptions: '-input=false'
            backendType: 'azurerm'
            backendServiceArm: 'terraform'
            backendAzureRmSubscriptionId: '14c83b29-a1c0-4f29-b32c-9b94ba49886f'
            backendAzureRmResourceGroupName: '$(tfresourceGroup)'
            backendAzureRmStorageAccountName: '$(tfStorageAccount)'
            backendAzureRmContainerName: '$(tfcontainer)'
            backendAzureRmKey: '$(tfkey)'
            workingDirectory: '$(System.DefaultWorkingDirectory)/incubationlab' 
                
      - task: TerraformCLI@0
        displayName: 'destroy'
        inputs:
          command: 'destroy'
          workingDirectory: '$(System.DefaultWorkingDirectory)/incubationlab'
          environmentServiceName: 'terraform'
          commandOptions: '-input=false'
          allowTelemetryCollection: false 